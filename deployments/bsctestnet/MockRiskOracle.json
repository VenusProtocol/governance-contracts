{
  "address": "0xFD28623359397880F822cD09d42D54058fc47Ce7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "initialSenders",
          "type": "address[]"
        },
        {
          "internalType": "string[]",
          "name": "initialUpdateTypes",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "AuthorizedSenderAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "AuthorizedSenderRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "referenceId",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "newValue",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "previousValue",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "updateType",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "updateId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "additionalData",
          "type": "bytes"
        }
      ],
      "name": "ParameterUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "string",
          "name": "updateType",
          "type": "string"
        }
      ],
      "name": "UpdateTypeAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "addAuthorizedSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newUpdateType",
          "type": "string"
        }
      ],
      "name": "addUpdateType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllUpdateTypes",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "updateType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getLatestUpdateByParameterAndMarket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "newValue",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "referenceId",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "previousValue",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "updateType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "updateId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "additionalData",
              "type": "bytes"
            }
          ],
          "internalType": "struct MockRiskOracle.RiskParameterUpdate",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "updateId",
          "type": "uint256"
        }
      ],
      "name": "getUpdateById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "newValue",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "referenceId",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "previousValue",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "updateType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "updateId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "market",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "additionalData",
              "type": "bytes"
            }
          ],
          "internalType": "struct MockRiskOracle.RiskParameterUpdate",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "isAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "latestUpdateIdByMarketAndType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "referenceIds",
          "type": "string[]"
        },
        {
          "internalType": "bytes[]",
          "name": "newValues",
          "type": "bytes[]"
        },
        {
          "internalType": "string[]",
          "name": "updateTypes",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "markets",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "additionalData",
          "type": "bytes[]"
        }
      ],
      "name": "publishBulkRiskParameterUpdates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "referenceId",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "newValue",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "updateType",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "additionalData",
          "type": "bytes"
        }
      ],
      "name": "publishRiskParameterUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "removeAuthorizedSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbf0933d4ac513eb8367bc319c6742b0ccbcac08fe4e3176da015298e39fb763d",
  "receipt": {
    "to": null,
    "from": "0xFEA1c651A47FE29dB9b1bf3cC1f224d8D9CFF68C",
    "contractAddress": "0xFD28623359397880F822cD09d42D54058fc47Ce7",
    "transactionIndex": 1,
    "gasUsed": "2141139",
    "logsBloom": "0x
    "blockHash": "0x737feadbc7065ab2fdd0620bf99bce00c594589baf182034fe7fe15e222039ab",
    "transactionHash": "0xbf0933d4ac513eb8367bc319c6742b0ccbcac08fe4e3176da015298e39fb763d",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 48623310,
        "transactionHash": "0xbf0933d4ac513eb8367bc319c6742b0ccbcac08fe4e3176da015298e39fb763d",
        "address": "0xFD28623359397880F822cD09d42D54058fc47Ce7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fea1c651a47fe29db9b1bf3cc1f224d8d9cff68c"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x737feadbc7065ab2fdd0620bf99bce00c594589baf182034fe7fe15e222039ab"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 48623310,
        "transactionHash": "0xbf0933d4ac513eb8367bc319c6742b0ccbcac08fe4e3176da015298e39fb763d",
        "address": "0xFD28623359397880F822cD09d42D54058fc47Ce7",
        "topics": [
          "0x07d686af6e6b7a2e3d03f5c81f05bba6a5b3686aca218f92f96b84c7d59aabaf",
          "0x068e90f21e6e5d3d0c48f5983b5b5b9b9e7c4efbb8b596ef6c729c6870a3c943"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x737feadbc7065ab2fdd0620bf99bce00c594589baf182034fe7fe15e222039ab"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 48623310,
        "transactionHash": "0xbf0933d4ac513eb8367bc319c6742b0ccbcac08fe4e3176da015298e39fb763d",
        "address": "0xFD28623359397880F822cD09d42D54058fc47Ce7",
        "topics": [
          "0x07d686af6e6b7a2e3d03f5c81f05bba6a5b3686aca218f92f96b84c7d59aabaf",
          "0xcec723f9fbde52ce895e2dc35ea3c6d14c9e1de94ef0a9e37f9d251de1a78175"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x737feadbc7065ab2fdd0620bf99bce00c594589baf182034fe7fe15e222039ab"
      }
    ],
    "blockNumber": 48623310,
    "cumulativeGasUsed": "2162139",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Mock Risk Oracle",
    [
      "0xFEA1c651A47FE29dB9b1bf3cC1f224d8D9CFF68C"
    ],
    [
      "supplyCap",
      "borrowCap"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "b9442ed5e7a021705374d7a83eea8b56",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"initialSenders\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"initialUpdateTypes\",\"type\":\"string[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AuthorizedSenderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AuthorizedSenderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"referenceId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newValue\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"previousValue\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"updateType\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"updateId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"additionalData\",\"type\":\"bytes\"}],\"name\":\"ParameterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"updateType\",\"type\":\"string\"}],\"name\":\"UpdateTypeAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"addAuthorizedSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newUpdateType\",\"type\":\"string\"}],\"name\":\"addUpdateType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllUpdateTypes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"updateType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getLatestUpdateByParameterAndMarket\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"newValue\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"referenceId\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"previousValue\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"updateType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"updateId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"additionalData\",\"type\":\"bytes\"}],\"internalType\":\"struct MockRiskOracle.RiskParameterUpdate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"updateId\",\"type\":\"uint256\"}],\"name\":\"getUpdateById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"newValue\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"referenceId\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"previousValue\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"updateType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"updateId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"additionalData\",\"type\":\"bytes\"}],\"internalType\":\"struct MockRiskOracle.RiskParameterUpdate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"latestUpdateIdByMarketAndType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"referenceIds\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"newValues\",\"type\":\"bytes[]\"},{\"internalType\":\"string[]\",\"name\":\"updateTypes\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"markets\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"additionalData\",\"type\":\"bytes[]\"}],\"name\":\"publishBulkRiskParameterUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"referenceId\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"newValue\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"updateType\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"additionalData\",\"type\":\"bytes\"}],\"name\":\"publishRiskParameterUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"removeAuthorizedSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Chaos Labs\",\"kind\":\"dev\",\"methods\":{\"addAuthorizedSender(address)\":{\"params\":{\"sender\":\"Address to be authorized.\"}},\"addUpdateType(string)\":{\"params\":{\"newUpdateType\":\"New type of update to allow.\"}},\"constructor\":{\"params\":{\"_description\":\"Description of contract\",\"initialSenders\":\"List of addresses that will initially be authorized to perform updates.\",\"initialUpdateTypes\":\"List of valid update types initially allowed.\"}},\"getLatestUpdateByParameterAndMarket(string,address)\":{\"params\":{\"market\":\"The market identifier.\",\"updateType\":\"The identifier for the parameter.\"},\"returns\":{\"_0\":\"The most recent RiskParameterUpdate for the specified parameter and market.\"}},\"isAuthorized(address)\":{\"params\":{\"sender\":\"Address to check.\"},\"returns\":{\"_0\":\"Boolean indicating whether the address is authorized.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"publishBulkRiskParameterUpdates(string[],bytes[],string[],address[],bytes[])\":{\"params\":{\"additionalData\":\"Array of additional data for the updates\",\"markets\":\"Array of addresses for markets of the parameter updates\",\"newValues\":\"Array of new values for each update.\",\"referenceIds\":\"Array of external reference IDs.\",\"updateTypes\":\"Array of types for each update, all must be authorized.\"}},\"publishRiskParameterUpdate(string,bytes,string,address,bytes)\":{\"params\":{\"additionalData\":\"Additional data for the update\",\"market\":\"Address for market of the parameter update\",\"newValue\":\"The new value of the risk parameter being updated.\",\"referenceId\":\"An external reference ID associated with the update.\",\"updateType\":\"Type of update performed, must be previously authorized.\"}},\"removeAuthorizedSender(address)\":{\"params\":{\"sender\":\"Address to be unauthorized.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Risk Oracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAuthorizedSender(address)\":{\"notice\":\"Adds a new sender to the list of addresses authorized to perform updates.\"},\"addUpdateType(string)\":{\"notice\":\"Adds a new type of update to the list of authorized update types.\"},\"constructor\":{\"notice\":\"Constructor to set initial authorized addresses and approved update types.\"},\"getLatestUpdateByParameterAndMarket(string,address)\":{\"notice\":\"Fetches the most recent update for a specific parameter in a specific market.\"},\"isAuthorized(address)\":{\"notice\":\"Checks if an address is authorized to perform updates.\"},\"publishBulkRiskParameterUpdates(string[],bytes[],string[],address[],bytes[])\":{\"notice\":\"Publishes multiple risk parameter updates in a single transaction.\"},\"publishRiskParameterUpdate(string,bytes,string,address,bytes)\":{\"notice\":\"Publishes a new risk parameter update.\"},\"removeAuthorizedSender(address)\":{\"notice\":\"Removes an address from the list of authorized senders.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/MockRiskOracle.sol\":\"MockRiskOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/test/MockRiskOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title Risk Oracle\\n * @author Chaos Labs\\n */\\ncontract MockRiskOracle is Ownable {\\n    struct RiskParameterUpdate {\\n        uint256 timestamp; // Timestamp of the update\\n        bytes newValue; // Encoded parameters, flexible for various data types\\n        string referenceId; // External reference, potentially linking to a document or off-chain data\\n        bytes previousValue; // Previous value of the parameter for historical comparison\\n        string updateType; // Classification of the update for validation purposes\\n        uint256 updateId; // Unique identifier for this specific update\\n        address market; // Address for market of the parameter update\\n        bytes additionalData; // Additional data for the update\\n    }\\n\\n    string[] private allUpdateTypes; // Array to store all update types\\n    mapping(string => bool) internal validUpdateTypes; // Whitelist of valid update type identifiers\\n    mapping(uint256 => RiskParameterUpdate) private updatesById; // Mapping from unique update ID to the update details\\n    mapping(address => bool) private authorizedSenders; // Authorized accounts capable of executing updates\\n\\n    // Mapping to store the latest update ID for each combination of market and update type\\n    mapping(address => mapping(string => uint256)) public latestUpdateIdByMarketAndType;\\n    uint256 public updateCounter; // Counter to keep track of the total number of updates\\n    string public description; // Description of contract\\n\\n    event ParameterUpdated(\\n        string referenceId,\\n        bytes newValue,\\n        bytes previousValue,\\n        uint256 timestamp,\\n        string indexed updateType,\\n        uint256 indexed updateId,\\n        address indexed market,\\n        bytes additionalData\\n    );\\n\\n    event AuthorizedSenderAdded(address indexed sender);\\n    event AuthorizedSenderRemoved(address indexed sender);\\n    event UpdateTypeAdded(string indexed updateType);\\n\\n    modifier onlyAuthorized() {\\n        require(authorizedSenders[msg.sender], \\\"Unauthorized: Sender not authorized.\\\");\\n        _;\\n    }\\n\\n    modifier onlyValidString(string memory input) {\\n        require(bytes(input).length > 0 && bytes(input).length <= 64, \\\"Invalid update type string\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructor to set initial authorized addresses and approved update types.\\n     * @param _description Description of contract\\n     * @param initialSenders List of addresses that will initially be authorized to perform updates.\\n     * @param initialUpdateTypes List of valid update types initially allowed.\\n     */\\n    constructor(\\n        string memory _description,\\n        address[] memory initialSenders,\\n        string[] memory initialUpdateTypes\\n    ) Ownable() {\\n        description = _description;\\n        for (uint256 i = 0; i < initialSenders.length; i++) {\\n            authorizedSenders[initialSenders[i]] = true; // Automatically authorize initial senders\\n        }\\n        for (uint256 i = 0; i < initialUpdateTypes.length; i++) {\\n            if (!validUpdateTypes[initialUpdateTypes[i]]) {\\n                // Ensure no duplicate updateTypes can be set\\n                validUpdateTypes[initialUpdateTypes[i]] = true; // Register initial valid updates\\n                allUpdateTypes.push(initialUpdateTypes[i]);\\n                emit UpdateTypeAdded(initialUpdateTypes[i]);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds a new sender to the list of addresses authorized to perform updates.\\n     * @param sender Address to be authorized.\\n     */\\n    function addAuthorizedSender(address sender) external onlyOwner {\\n        require(!authorizedSenders[sender], \\\"Sender already authorized.\\\");\\n        authorizedSenders[sender] = true;\\n        emit AuthorizedSenderAdded(sender);\\n    }\\n\\n    /**\\n     * @notice Removes an address from the list of authorized senders.\\n     * @param sender Address to be unauthorized.\\n     */\\n    function removeAuthorizedSender(address sender) external onlyOwner {\\n        require(authorizedSenders[sender], \\\"Sender not authorized.\\\");\\n        authorizedSenders[sender] = false;\\n        emit AuthorizedSenderRemoved(sender);\\n    }\\n\\n    /**\\n     * @notice Adds a new type of update to the list of authorized update types.\\n     * @param newUpdateType New type of update to allow.\\n     */\\n    function addUpdateType(string memory newUpdateType) external onlyOwner onlyValidString(newUpdateType) {\\n        require(!validUpdateTypes[newUpdateType], \\\"Update type already exists.\\\");\\n        validUpdateTypes[newUpdateType] = true;\\n        allUpdateTypes.push(newUpdateType);\\n        emit UpdateTypeAdded(newUpdateType);\\n    }\\n\\n    /**\\n     * @notice Publishes a new risk parameter update.\\n     * @param referenceId An external reference ID associated with the update.\\n     * @param newValue The new value of the risk parameter being updated.\\n     * @param updateType Type of update performed, must be previously authorized.\\n     * @param market Address for market of the parameter update\\n     * @param additionalData Additional data for the update\\n     */\\n    function publishRiskParameterUpdate(\\n        string memory referenceId,\\n        bytes memory newValue,\\n        string memory updateType,\\n        address market,\\n        bytes memory additionalData\\n    ) external onlyAuthorized {\\n        _processUpdate(referenceId, newValue, updateType, market, additionalData);\\n    }\\n\\n    /**\\n     * @notice Publishes multiple risk parameter updates in a single transaction.\\n     * @param referenceIds Array of external reference IDs.\\n     * @param newValues Array of new values for each update.\\n     * @param updateTypes Array of types for each update, all must be authorized.\\n     * @param markets Array of addresses for markets of the parameter updates\\n     * @param additionalData Array of additional data for the updates\\n     *\\n     */\\n    function publishBulkRiskParameterUpdates(\\n        string[] memory referenceIds,\\n        bytes[] memory newValues,\\n        string[] memory updateTypes,\\n        address[] memory markets,\\n        bytes[] memory additionalData\\n    ) external onlyAuthorized {\\n        for (uint256 i = 0; i < referenceIds.length; i++) {\\n            _processUpdate(referenceIds[i], newValues[i], updateTypes[i], markets[i], additionalData[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Processes an update internally, recording and emitting an event.\\n     */\\n    function _processUpdate(\\n        string memory referenceId,\\n        bytes memory newValue,\\n        string memory updateType,\\n        address market,\\n        bytes memory additionalData\\n    ) internal {\\n        require(validUpdateTypes[updateType], \\\"Unauthorized update type.\\\");\\n        updateCounter++;\\n        uint256 previousUpdateId = latestUpdateIdByMarketAndType[market][updateType];\\n        bytes memory previousValue = updatesById[previousUpdateId].newValue;\\n\\n        RiskParameterUpdate memory newUpdate = RiskParameterUpdate(\\n            block.timestamp,\\n            newValue,\\n            referenceId,\\n            previousValue,\\n            updateType,\\n            updateCounter,\\n            market,\\n            additionalData\\n        );\\n        updatesById[updateCounter] = newUpdate;\\n\\n        // Update the latest update ID for the market and updateType combination\\n        latestUpdateIdByMarketAndType[market][updateType] = updateCounter;\\n\\n        emit ParameterUpdated(\\n            referenceId,\\n            newValue,\\n            previousValue,\\n            block.timestamp,\\n            updateType,\\n            updateCounter,\\n            market,\\n            additionalData\\n        );\\n    }\\n\\n    function getAllUpdateTypes() external view returns (string[] memory) {\\n        return allUpdateTypes;\\n    }\\n\\n    /**\\n     * @notice Fetches the most recent update for a specific parameter in a specific market.\\n     * @param updateType The identifier for the parameter.\\n     * @param market The market identifier.\\n     * @return The most recent RiskParameterUpdate for the specified parameter and market.\\n     */\\n    function getLatestUpdateByParameterAndMarket(\\n        string memory updateType,\\n        address market\\n    ) external view returns (RiskParameterUpdate memory) {\\n        uint256 updateId = latestUpdateIdByMarketAndType[market][updateType];\\n        require(updateId > 0, \\\"No update found for the specified parameter and market.\\\");\\n        return updatesById[updateId];\\n    }\\n\\n    /*\\n     * @notice Fetches the update for a provided updateId.\\n     * @param updateId Update ID.\\n     * @return The most recent RiskParameterUpdate for the specified id.\\n     */\\n    function getUpdateById(uint256 updateId) external view returns (RiskParameterUpdate memory) {\\n        require(updateId > 0 && updateId <= updateCounter, \\\"Invalid update ID.\\\");\\n        return updatesById[updateId];\\n    }\\n\\n    /**\\n     * @notice Checks if an address is authorized to perform updates.\\n     * @param sender Address to check.\\n     * @return Boolean indicating whether the address is authorized.\\n     */\\n    function isAuthorized(address sender) external view returns (bool) {\\n        return authorizedSenders[sender];\\n    }\\n}\\n\",\"keccak256\":\"0xe4dd0935ad8bade846faa8eacca3f81676195c0868e8499f15a57469ee582d98\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161283838038061283883398101604081905261002f916103be565b610038336101e7565b6007610044848261053b565b5060005b82518110156100a357600160046000858481518110610069576100696105fa565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916911515919091179055600101610048565b5060005b81518110156101de5760028282815181106100c4576100c46105fa565b60200260200101516040516100d99190610610565b9081526040519081900360200190205460ff166101d65760016002838381518110610106576101066105fa565b602002602001015160405161011b9190610610565b908152602001604051809103902060006101000a81548160ff0219169083151502179055506001828281518110610154576101546105fa565b6020908102919091018101518254600181018455600093845291909220019061017d908261053b565b50818181518110610190576101906105fa565b60200260200101516040516101a59190610610565b604051908190038120907f07d686af6e6b7a2e3d03f5c81f05bba6a5b3686aca218f92f96b84c7d59aabaf90600090a25b6001016100a7565b5050505061062c565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561027557610275610237565b604052919050565b60005b83811015610298578181015183820152602001610280565b50506000910152565b600082601f8301126102b257600080fd5b81516001600160401b038111156102cb576102cb610237565b6102de601f8201601f191660200161024d565b8181528460208386010111156102f357600080fd5b61030482602083016020870161027d565b949350505050565b60006001600160401b0382111561032557610325610237565b5060051b60200190565b600082601f83011261034057600080fd5b815160206103556103508361030c565b61024d565b82815260059290921b8401810191818101908684111561037457600080fd5b8286015b848110156103b35780516001600160401b038111156103975760008081fd5b6103a58986838b01016102a1565b845250918301918301610378565b509695505050505050565b6000806000606084860312156103d357600080fd5b83516001600160401b03808211156103ea57600080fd5b6103f6878388016102a1565b945060209150818601518181111561040d57600080fd5b8601601f8101881361041e57600080fd5b805161042c6103508261030c565b81815260059190911b8201840190848101908a83111561044b57600080fd5b928501925b8284101561047f5783516001600160a01b03811681146104705760008081fd5b82529285019290850190610450565b60408a015190975094505050508082111561049957600080fd5b506104a68682870161032f565b9150509250925092565b600181811c908216806104c457607f821691505b6020821081036104e457634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610536576000816000526020600020601f850160051c810160208610156105135750805b601f850160051c820191505b818110156105325782815560010161051f565b5050505b505050565b81516001600160401b0381111561055457610554610237565b6105688161056284546104b0565b846104ea565b602080601f83116001811461059d57600084156105855750858301515b600019600386901b1c1916600185901b178555610532565b600085815260208120601f198616915b828110156105cc578886015182559484019460019091019084016105ad565b50858210156105ea5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603260045260246000fd5b6000825161062281846020870161027d565b9190910192915050565b6121fd8061063b6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806377abc9bd11610097578063cbd5796711610066578063cbd579671461021a578063f2fde38b1461022d578063fa7229ee14610240578063fe9fbb801461025357600080fd5b806377abc9bd146101b75780638da5cb5b146101ca578063b0be2505146101f2578063c030ce7b1461020557600080fd5b80635decfee4116100d35780635decfee41461014b5780636a309fe91461015e578063715018a61461019a5780637284e416146101a257600080fd5b8063031ed79c146100fa5780631687fe8e1461010f57806337759b9a1461012b575b600080fd5b61010d610108366004611a71565b61029c565b005b61011860065481565b6040519081526020015b60405180910390f35b61013e610139366004611b43565b6103e5565b6040516101229190611bca565b61013e610159366004611cc3565b6107f3565b61011861016c366004611d11565b6005602090815260009283526040909220815180830184018051928152908401929093019190912091525481565b61010d610c5f565b6101aa610c73565b6040516101229190611d5f565b61010d6101c5366004611d79565b610d01565b60005460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610122565b61010d610200366004611db6565b610edb565b61020d610f8d565b6040516101229190611e67565b61010d610228366004611ee9565b611066565b61010d61023b366004611ee9565b611171565b61010d61024e366004611ee9565b611228565b61028c610261366004611ee9565b73ffffffffffffffffffffffffffffffffffffffff1660009081526004602052604090205460ff1690565b6040519015158152602001610122565b3360009081526004602052604090205460ff1661033f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f556e617574686f72697a65643a2053656e646572206e6f7420617574686f726960448201527f7a65642e0000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60005b85518110156103dd576103d586828151811061036057610360611f04565b602002602001015186838151811061037a5761037a611f04565b602002602001015186848151811061039457610394611f04565b60200260200101518685815181106103ae576103ae611f04565b60200260200101518686815181106103c8576103c8611f04565b6020026020010151611337565b600101610342565b505050505050565b610443604051806101000160405280600081526020016060815260200160608152602001606081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b60008211801561045557506006548211155b6104bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c6964207570646174652049442e00000000000000000000000000006044820152606401610336565b6003600083815260200190815260200160002060405180610100016040529081600082015481526020016001820180546104f490611f33565b80601f016020809104026020016040519081016040528092919081815260200182805461052090611f33565b801561056d5780601f106105425761010080835404028352916020019161056d565b820191906000526020600020905b81548152906001019060200180831161055057829003601f168201915b5050505050815260200160028201805461058690611f33565b80601f01602080910402602001604051908101604052809291908181526020018280546105b290611f33565b80156105ff5780601f106105d4576101008083540402835291602001916105ff565b820191906000526020600020905b8154815290600101906020018083116105e257829003601f168201915b5050505050815260200160038201805461061890611f33565b80601f016020809104026020016040519081016040528092919081815260200182805461064490611f33565b80156106915780601f1061066657610100808354040283529160200191610691565b820191906000526020600020905b81548152906001019060200180831161067457829003601f168201915b505050505081526020016004820180546106aa90611f33565b80601f01602080910402602001604051908101604052809291908181526020018280546106d690611f33565b80156107235780601f106106f857610100808354040283529160200191610723565b820191906000526020600020905b81548152906001019060200180831161070657829003601f168201915b505050918352505060058201546020820152600682015473ffffffffffffffffffffffffffffffffffffffff16604082015260078201805460609092019161076a90611f33565b80601f016020809104026020016040519081016040528092919081815260200182805461079690611f33565b80156107e35780601f106107b8576101008083540402835291602001916107e3565b820191906000526020600020905b8154815290600101906020018083116107c657829003601f168201915b5050505050815250509050919050565b610851604051806101000160405280600081526020016060815260200160608152602001606081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600560205260408082209051610884908690611f86565b908152602001604051809103902054905060008111610925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f4e6f2075706461746520666f756e6420666f722074686520737065636966696560448201527f6420706172616d6574657220616e64206d61726b65742e0000000000000000006064820152608401610336565b60036000828152602001908152602001600020604051806101000160405290816000820154815260200160018201805461095e90611f33565b80601f016020809104026020016040519081016040528092919081815260200182805461098a90611f33565b80156109d75780601f106109ac576101008083540402835291602001916109d7565b820191906000526020600020905b8154815290600101906020018083116109ba57829003601f168201915b505050505081526020016002820180546109f090611f33565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1c90611f33565b8015610a695780601f10610a3e57610100808354040283529160200191610a69565b820191906000526020600020905b815481529060010190602001808311610a4c57829003601f168201915b50505050508152602001600382018054610a8290611f33565b80601f0160208091040260200160405190810160405280929190818152602001828054610aae90611f33565b8015610afb5780601f10610ad057610100808354040283529160200191610afb565b820191906000526020600020905b815481529060010190602001808311610ade57829003601f168201915b50505050508152602001600482018054610b1490611f33565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4090611f33565b8015610b8d5780601f10610b6257610100808354040283529160200191610b8d565b820191906000526020600020905b815481529060010190602001808311610b7057829003601f168201915b505050918352505060058201546020820152600682015473ffffffffffffffffffffffffffffffffffffffff166040820152600782018054606090920191610bd490611f33565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0090611f33565b8015610c4d5780601f10610c2257610100808354040283529160200191610c4d565b820191906000526020600020905b815481529060010190602001808311610c3057829003601f168201915b50505050508152505091505092915050565b610c676116ac565b610c71600061172d565b565b60078054610c8090611f33565b80601f0160208091040260200160405190810160405280929190818152602001828054610cac90611f33565b8015610cf95780601f10610cce57610100808354040283529160200191610cf9565b820191906000526020600020905b815481529060010190602001808311610cdc57829003601f168201915b505050505081565b610d096116ac565b8060008151118015610d1d57506040815111155b610d83576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f496e76616c696420757064617465207479706520737472696e670000000000006044820152606401610336565b600282604051610d939190611f86565b9081526040519081900360200190205460ff1615610e0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f557064617465207479706520616c7265616479206578697374732e00000000006044820152606401610336565b6001600283604051610e1f9190611f86565b90815260405190819003602001902080549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009092169190911790556001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601610e988382611fef565b5081604051610ea79190611f86565b604051908190038120907f07d686af6e6b7a2e3d03f5c81f05bba6a5b3686aca218f92f96b84c7d59aabaf90600090a25050565b3360009081526004602052604090205460ff16610f79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f556e617574686f72697a65643a2053656e646572206e6f7420617574686f726960448201527f7a65642e000000000000000000000000000000000000000000000000000000006064820152608401610336565b610f868585858585611337565b5050505050565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561105d578382906000526020600020018054610fd090611f33565b80601f0160208091040260200160405190810160405280929190818152602001828054610ffc90611f33565b80156110495780601f1061101e57610100808354040283529160200191611049565b820191906000526020600020905b81548152906001019060200180831161102c57829003601f168201915b505050505081526020019060010190610fb1565b50505050905090565b61106e6116ac565b73ffffffffffffffffffffffffffffffffffffffff811660009081526004602052604090205460ff166110fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f53656e646572206e6f7420617574686f72697a65642e000000000000000000006044820152606401610336565b73ffffffffffffffffffffffffffffffffffffffff811660008181526004602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055517f98f9958a855d78eae670154a7d047d26968849962c3204c2b12c2228634f4ff89190a250565b6111796116ac565b73ffffffffffffffffffffffffffffffffffffffff811661121c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610336565b6112258161172d565b50565b6112306116ac565b73ffffffffffffffffffffffffffffffffffffffff811660009081526004602052604090205460ff16156112c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f53656e64657220616c726561647920617574686f72697a65642e0000000000006044820152606401610336565b73ffffffffffffffffffffffffffffffffffffffff811660008181526004602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517fd06d2241a59677d082959f22e5a5212c57a9e890949a9d0f2426efd49f8c5d7f9190a250565b6002836040516113479190611f86565b9081526040519081900360200190205460ff166113c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f556e617574686f72697a65642075706461746520747970652e000000000000006044820152606401610336565b600680549060006113d083612109565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152600560205260408082209051611408908690611f86565b9081526020016040518091039020549050600060036000838152602001908152602001600020600101805461143c90611f33565b80601f016020809104026020016040519081016040528092919081815260200182805461146890611f33565b80156114b55780601f1061148a576101008083540402835291602001916114b5565b820191906000526020600020905b81548152906001019060200180831161149857829003601f168201915b5050604080516101008101825242815260208082018d81528284018f905260608301889052608083018d905260065460a0840181905273ffffffffffffffffffffffffffffffffffffffff8d1660c085015260e084018c9052600090815260039092529290208151815591519596509485945090925060018301915061153b9082611fef565b50604082015160028201906115509082611fef565b50606082015160038201906115659082611fef565b506080820151600482019061157a9082611fef565b5060a0820151600582015560c08201516006820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905560e082015160078201906115e49082611fef565b505060065473ffffffffffffffffffffffffffffffffffffffff871660009081526005602052604090819020905191925090611621908990611f86565b9081526020016040518091039020819055508473ffffffffffffffffffffffffffffffffffffffff166006548760405161165b9190611f86565b60405180910390207ff4ffa2dade992ad974b9415d5dc108fa2a4a6de3822a3a0bb50d5e6991bdb8ae8b8b87428b60405161169a959493929190612168565b60405180910390a45050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c71576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610336565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611818576118186117a2565b604052919050565b600067ffffffffffffffff82111561183a5761183a6117a2565b5060051b60200190565b600082601f83011261185557600080fd5b813567ffffffffffffffff81111561186f5761186f6117a2565b6118a060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016117d1565b8181528460208386010111156118b557600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126118e357600080fd5b813560206118f86118f383611820565b6117d1565b82815260059290921b8401810191818101908684111561191757600080fd5b8286015b8481101561195757803567ffffffffffffffff81111561193b5760008081fd5b6119498986838b0101611844565b84525091830191830161191b565b509695505050505050565b600082601f83011261197357600080fd5b813560206119836118f383611820565b82815260059290921b840181019181810190868411156119a257600080fd5b8286015b8481101561195757803567ffffffffffffffff8111156119c65760008081fd5b6119d48986838b0101611844565b8452509183019183016119a6565b803573ffffffffffffffffffffffffffffffffffffffff81168114611a0657600080fd5b919050565b600082601f830112611a1c57600080fd5b81356020611a2c6118f383611820565b8083825260208201915060208460051b870101935086841115611a4e57600080fd5b602086015b8481101561195757611a64816119e2565b8352918301918301611a53565b600080600080600060a08688031215611a8957600080fd5b853567ffffffffffffffff80821115611aa157600080fd5b611aad89838a016118d2565b96506020880135915080821115611ac357600080fd5b611acf89838a01611962565b95506040880135915080821115611ae557600080fd5b611af189838a016118d2565b94506060880135915080821115611b0757600080fd5b611b1389838a01611a0b565b93506080880135915080821115611b2957600080fd5b50611b3688828901611962565b9150509295509295909350565b600060208284031215611b5557600080fd5b5035919050565b60005b83811015611b77578181015183820152602001611b5f565b50506000910152565b60008151808452611b98816020860160208601611b5c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081528151602082015260006020830151610100806040850152611bf3610120850183611b80565b915060408501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080868503016060870152611c2f8483611b80565b93506060870151915080868503016080870152611c4c8483611b80565b935060808701519150808685030160a0870152611c698483611b80565b935060a087015160c087015260c08701519150611c9e60e087018373ffffffffffffffffffffffffffffffffffffffff169052565b60e0870151915080868503018387015250611cb98382611b80565b9695505050505050565b60008060408385031215611cd657600080fd5b823567ffffffffffffffff811115611ced57600080fd5b611cf985828601611844565b925050611d08602084016119e2565b90509250929050565b60008060408385031215611d2457600080fd5b611d2d836119e2565b9150602083013567ffffffffffffffff811115611d4957600080fd5b611d5585828601611844565b9150509250929050565b602081526000611d726020830184611b80565b9392505050565b600060208284031215611d8b57600080fd5b813567ffffffffffffffff811115611da257600080fd5b611dae84828501611844565b949350505050565b600080600080600060a08688031215611dce57600080fd5b853567ffffffffffffffff80821115611de657600080fd5b611df289838a01611844565b96506020880135915080821115611e0857600080fd5b611e1489838a01611844565b95506040880135915080821115611e2a57600080fd5b611e3689838a01611844565b9450611e44606089016119e2565b93506080880135915080821115611e5a57600080fd5b50611b3688828901611844565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015611edc577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611eca858351611b80565b94509285019290850190600101611e90565b5092979650505050505050565b600060208284031215611efb57600080fd5b611d72826119e2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c90821680611f4757607f821691505b602082108103611f80577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008251611f98818460208701611b5c565b9190910192915050565b601f821115611fea576000816000526020600020601f850160051c81016020861015611fcb5750805b601f850160051c820191505b818110156103dd57828155600101611fd7565b505050565b815167ffffffffffffffff811115612009576120096117a2565b61201d816120178454611f33565b84611fa2565b602080601f831160018114612070576000841561203a5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556103dd565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156120bd5788860151825594840194600190910190840161209e565b50858210156120f957878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612161577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b60a08152600061217b60a0830188611b80565b828103602084015261218d8188611b80565b905082810360408401526121a18187611b80565b905084606084015282810360808401526121bb8185611b80565b9897505050505050505056fea2646970667358221220c51520a24b68af5afa081c68b4188ea4d54b36db53a8eae77ae2ac8df9e3b3e864736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806377abc9bd11610097578063cbd5796711610066578063cbd579671461021a578063f2fde38b1461022d578063fa7229ee14610240578063fe9fbb801461025357600080fd5b806377abc9bd146101b75780638da5cb5b146101ca578063b0be2505146101f2578063c030ce7b1461020557600080fd5b80635decfee4116100d35780635decfee41461014b5780636a309fe91461015e578063715018a61461019a5780637284e416146101a257600080fd5b8063031ed79c146100fa5780631687fe8e1461010f57806337759b9a1461012b575b600080fd5b61010d610108366004611a71565b61029c565b005b61011860065481565b6040519081526020015b60405180910390f35b61013e610139366004611b43565b6103e5565b6040516101229190611bca565b61013e610159366004611cc3565b6107f3565b61011861016c366004611d11565b6005602090815260009283526040909220815180830184018051928152908401929093019190912091525481565b61010d610c5f565b6101aa610c73565b6040516101229190611d5f565b61010d6101c5366004611d79565b610d01565b60005460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610122565b61010d610200366004611db6565b610edb565b61020d610f8d565b6040516101229190611e67565b61010d610228366004611ee9565b611066565b61010d61023b366004611ee9565b611171565b61010d61024e366004611ee9565b611228565b61028c610261366004611ee9565b73ffffffffffffffffffffffffffffffffffffffff1660009081526004602052604090205460ff1690565b6040519015158152602001610122565b3360009081526004602052604090205460ff1661033f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f556e617574686f72697a65643a2053656e646572206e6f7420617574686f726960448201527f7a65642e0000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60005b85518110156103dd576103d586828151811061036057610360611f04565b602002602001015186838151811061037a5761037a611f04565b602002602001015186848151811061039457610394611f04565b60200260200101518685815181106103ae576103ae611f04565b60200260200101518686815181106103c8576103c8611f04565b6020026020010151611337565b600101610342565b505050505050565b610443604051806101000160405280600081526020016060815260200160608152602001606081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b60008211801561045557506006548211155b6104bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f496e76616c6964207570646174652049442e00000000000000000000000000006044820152606401610336565b6003600083815260200190815260200160002060405180610100016040529081600082015481526020016001820180546104f490611f33565b80601f016020809104026020016040519081016040528092919081815260200182805461052090611f33565b801561056d5780601f106105425761010080835404028352916020019161056d565b820191906000526020600020905b81548152906001019060200180831161055057829003601f168201915b5050505050815260200160028201805461058690611f33565b80601f01602080910402602001604051908101604052809291908181526020018280546105b290611f33565b80156105ff5780601f106105d4576101008083540402835291602001916105ff565b820191906000526020600020905b8154815290600101906020018083116105e257829003601f168201915b5050505050815260200160038201805461061890611f33565b80601f016020809104026020016040519081016040528092919081815260200182805461064490611f33565b80156106915780601f1061066657610100808354040283529160200191610691565b820191906000526020600020905b81548152906001019060200180831161067457829003601f168201915b505050505081526020016004820180546106aa90611f33565b80601f01602080910402602001604051908101604052809291908181526020018280546106d690611f33565b80156107235780601f106106f857610100808354040283529160200191610723565b820191906000526020600020905b81548152906001019060200180831161070657829003601f168201915b505050918352505060058201546020820152600682015473ffffffffffffffffffffffffffffffffffffffff16604082015260078201805460609092019161076a90611f33565b80601f016020809104026020016040519081016040528092919081815260200182805461079690611f33565b80156107e35780601f106107b8576101008083540402835291602001916107e3565b820191906000526020600020905b8154815290600101906020018083116107c657829003601f168201915b5050505050815250509050919050565b610851604051806101000160405280600081526020016060815260200160608152602001606081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600560205260408082209051610884908690611f86565b908152602001604051809103902054905060008111610925576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603760248201527f4e6f2075706461746520666f756e6420666f722074686520737065636966696560448201527f6420706172616d6574657220616e64206d61726b65742e0000000000000000006064820152608401610336565b60036000828152602001908152602001600020604051806101000160405290816000820154815260200160018201805461095e90611f33565b80601f016020809104026020016040519081016040528092919081815260200182805461098a90611f33565b80156109d75780601f106109ac576101008083540402835291602001916109d7565b820191906000526020600020905b8154815290600101906020018083116109ba57829003601f168201915b505050505081526020016002820180546109f090611f33565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1c90611f33565b8015610a695780601f10610a3e57610100808354040283529160200191610a69565b820191906000526020600020905b815481529060010190602001808311610a4c57829003601f168201915b50505050508152602001600382018054610a8290611f33565b80601f0160208091040260200160405190810160405280929190818152602001828054610aae90611f33565b8015610afb5780601f10610ad057610100808354040283529160200191610afb565b820191906000526020600020905b815481529060010190602001808311610ade57829003601f168201915b50505050508152602001600482018054610b1490611f33565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4090611f33565b8015610b8d5780601f10610b6257610100808354040283529160200191610b8d565b820191906000526020600020905b815481529060010190602001808311610b7057829003601f168201915b505050918352505060058201546020820152600682015473ffffffffffffffffffffffffffffffffffffffff166040820152600782018054606090920191610bd490611f33565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0090611f33565b8015610c4d5780601f10610c2257610100808354040283529160200191610c4d565b820191906000526020600020905b815481529060010190602001808311610c3057829003601f168201915b50505050508152505091505092915050565b610c676116ac565b610c71600061172d565b565b60078054610c8090611f33565b80601f0160208091040260200160405190810160405280929190818152602001828054610cac90611f33565b8015610cf95780601f10610cce57610100808354040283529160200191610cf9565b820191906000526020600020905b815481529060010190602001808311610cdc57829003601f168201915b505050505081565b610d096116ac565b8060008151118015610d1d57506040815111155b610d83576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f496e76616c696420757064617465207479706520737472696e670000000000006044820152606401610336565b600282604051610d939190611f86565b9081526040519081900360200190205460ff1615610e0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f557064617465207479706520616c7265616479206578697374732e00000000006044820152606401610336565b6001600283604051610e1f9190611f86565b90815260405190819003602001902080549115157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff009092169190911790556001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601610e988382611fef565b5081604051610ea79190611f86565b604051908190038120907f07d686af6e6b7a2e3d03f5c81f05bba6a5b3686aca218f92f96b84c7d59aabaf90600090a25050565b3360009081526004602052604090205460ff16610f79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f556e617574686f72697a65643a2053656e646572206e6f7420617574686f726960448201527f7a65642e000000000000000000000000000000000000000000000000000000006064820152608401610336565b610f868585858585611337565b5050505050565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561105d578382906000526020600020018054610fd090611f33565b80601f0160208091040260200160405190810160405280929190818152602001828054610ffc90611f33565b80156110495780601f1061101e57610100808354040283529160200191611049565b820191906000526020600020905b81548152906001019060200180831161102c57829003601f168201915b505050505081526020019060010190610fb1565b50505050905090565b61106e6116ac565b73ffffffffffffffffffffffffffffffffffffffff811660009081526004602052604090205460ff166110fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f53656e646572206e6f7420617574686f72697a65642e000000000000000000006044820152606401610336565b73ffffffffffffffffffffffffffffffffffffffff811660008181526004602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055517f98f9958a855d78eae670154a7d047d26968849962c3204c2b12c2228634f4ff89190a250565b6111796116ac565b73ffffffffffffffffffffffffffffffffffffffff811661121c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610336565b6112258161172d565b50565b6112306116ac565b73ffffffffffffffffffffffffffffffffffffffff811660009081526004602052604090205460ff16156112c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f53656e64657220616c726561647920617574686f72697a65642e0000000000006044820152606401610336565b73ffffffffffffffffffffffffffffffffffffffff811660008181526004602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517fd06d2241a59677d082959f22e5a5212c57a9e890949a9d0f2426efd49f8c5d7f9190a250565b6002836040516113479190611f86565b9081526040519081900360200190205460ff166113c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f556e617574686f72697a65642075706461746520747970652e000000000000006044820152606401610336565b600680549060006113d083612109565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152600560205260408082209051611408908690611f86565b9081526020016040518091039020549050600060036000838152602001908152602001600020600101805461143c90611f33565b80601f016020809104026020016040519081016040528092919081815260200182805461146890611f33565b80156114b55780601f1061148a576101008083540402835291602001916114b5565b820191906000526020600020905b81548152906001019060200180831161149857829003601f168201915b5050604080516101008101825242815260208082018d81528284018f905260608301889052608083018d905260065460a0840181905273ffffffffffffffffffffffffffffffffffffffff8d1660c085015260e084018c9052600090815260039092529290208151815591519596509485945090925060018301915061153b9082611fef565b50604082015160028201906115509082611fef565b50606082015160038201906115659082611fef565b506080820151600482019061157a9082611fef565b5060a0820151600582015560c08201516006820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905560e082015160078201906115e49082611fef565b505060065473ffffffffffffffffffffffffffffffffffffffff871660009081526005602052604090819020905191925090611621908990611f86565b9081526020016040518091039020819055508473ffffffffffffffffffffffffffffffffffffffff166006548760405161165b9190611f86565b60405180910390207ff4ffa2dade992ad974b9415d5dc108fa2a4a6de3822a3a0bb50d5e6991bdb8ae8b8b87428b60405161169a959493929190612168565b60405180910390a45050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c71576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610336565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611818576118186117a2565b604052919050565b600067ffffffffffffffff82111561183a5761183a6117a2565b5060051b60200190565b600082601f83011261185557600080fd5b813567ffffffffffffffff81111561186f5761186f6117a2565b6118a060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016117d1565b8181528460208386010111156118b557600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126118e357600080fd5b813560206118f86118f383611820565b6117d1565b82815260059290921b8401810191818101908684111561191757600080fd5b8286015b8481101561195757803567ffffffffffffffff81111561193b5760008081fd5b6119498986838b0101611844565b84525091830191830161191b565b509695505050505050565b600082601f83011261197357600080fd5b813560206119836118f383611820565b82815260059290921b840181019181810190868411156119a257600080fd5b8286015b8481101561195757803567ffffffffffffffff8111156119c65760008081fd5b6119d48986838b0101611844565b8452509183019183016119a6565b803573ffffffffffffffffffffffffffffffffffffffff81168114611a0657600080fd5b919050565b600082601f830112611a1c57600080fd5b81356020611a2c6118f383611820565b8083825260208201915060208460051b870101935086841115611a4e57600080fd5b602086015b8481101561195757611a64816119e2565b8352918301918301611a53565b600080600080600060a08688031215611a8957600080fd5b853567ffffffffffffffff80821115611aa157600080fd5b611aad89838a016118d2565b96506020880135915080821115611ac357600080fd5b611acf89838a01611962565b95506040880135915080821115611ae557600080fd5b611af189838a016118d2565b94506060880135915080821115611b0757600080fd5b611b1389838a01611a0b565b93506080880135915080821115611b2957600080fd5b50611b3688828901611962565b9150509295509295909350565b600060208284031215611b5557600080fd5b5035919050565b60005b83811015611b77578181015183820152602001611b5f565b50506000910152565b60008151808452611b98816020860160208601611b5c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081528151602082015260006020830151610100806040850152611bf3610120850183611b80565b915060408501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe080868503016060870152611c2f8483611b80565b93506060870151915080868503016080870152611c4c8483611b80565b935060808701519150808685030160a0870152611c698483611b80565b935060a087015160c087015260c08701519150611c9e60e087018373ffffffffffffffffffffffffffffffffffffffff169052565b60e0870151915080868503018387015250611cb98382611b80565b9695505050505050565b60008060408385031215611cd657600080fd5b823567ffffffffffffffff811115611ced57600080fd5b611cf985828601611844565b925050611d08602084016119e2565b90509250929050565b60008060408385031215611d2457600080fd5b611d2d836119e2565b9150602083013567ffffffffffffffff811115611d4957600080fd5b611d5585828601611844565b9150509250929050565b602081526000611d726020830184611b80565b9392505050565b600060208284031215611d8b57600080fd5b813567ffffffffffffffff811115611da257600080fd5b611dae84828501611844565b949350505050565b600080600080600060a08688031215611dce57600080fd5b853567ffffffffffffffff80821115611de657600080fd5b611df289838a01611844565b96506020880135915080821115611e0857600080fd5b611e1489838a01611844565b95506040880135915080821115611e2a57600080fd5b611e3689838a01611844565b9450611e44606089016119e2565b93506080880135915080821115611e5a57600080fd5b50611b3688828901611844565b600060208083016020845280855180835260408601915060408160051b87010192506020870160005b82811015611edc577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0888603018452611eca858351611b80565b94509285019290850190600101611e90565b5092979650505050505050565b600060208284031215611efb57600080fd5b611d72826119e2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c90821680611f4757607f821691505b602082108103611f80577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008251611f98818460208701611b5c565b9190910192915050565b601f821115611fea576000816000526020600020601f850160051c81016020861015611fcb5750805b601f850160051c820191505b818110156103dd57828155600101611fd7565b505050565b815167ffffffffffffffff811115612009576120096117a2565b61201d816120178454611f33565b84611fa2565b602080601f831160018114612070576000841561203a5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b1785556103dd565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b828110156120bd5788860151825594840194600190910190840161209e565b50858210156120f957878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612161577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b60a08152600061217b60a0830188611b80565b828103602084015261218d8188611b80565b905082810360408401526121a18187611b80565b905084606084015282810360808401526121bb8185611b80565b9897505050505050505056fea2646970667358221220c51520a24b68af5afa081c68b4188ea4d54b36db53a8eae77ae2ac8df9e3b3e864736f6c63430008190033",
  "devdoc": {
    "author": "Chaos Labs",
    "kind": "dev",
    "methods": {
      "addAuthorizedSender(address)": {
        "params": {
          "sender": "Address to be authorized."
        }
      },
      "addUpdateType(string)": {
        "params": {
          "newUpdateType": "New type of update to allow."
        }
      },
      "constructor": {
        "params": {
          "_description": "Description of contract",
          "initialSenders": "List of addresses that will initially be authorized to perform updates.",
          "initialUpdateTypes": "List of valid update types initially allowed."
        }
      },
      "getLatestUpdateByParameterAndMarket(string,address)": {
        "params": {
          "market": "The market identifier.",
          "updateType": "The identifier for the parameter."
        },
        "returns": {
          "_0": "The most recent RiskParameterUpdate for the specified parameter and market."
        }
      },
      "isAuthorized(address)": {
        "params": {
          "sender": "Address to check."
        },
        "returns": {
          "_0": "Boolean indicating whether the address is authorized."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "publishBulkRiskParameterUpdates(string[],bytes[],string[],address[],bytes[])": {
        "params": {
          "additionalData": "Array of additional data for the updates",
          "markets": "Array of addresses for markets of the parameter updates",
          "newValues": "Array of new values for each update.",
          "referenceIds": "Array of external reference IDs.",
          "updateTypes": "Array of types for each update, all must be authorized."
        }
      },
      "publishRiskParameterUpdate(string,bytes,string,address,bytes)": {
        "params": {
          "additionalData": "Additional data for the update",
          "market": "Address for market of the parameter update",
          "newValue": "The new value of the risk parameter being updated.",
          "referenceId": "An external reference ID associated with the update.",
          "updateType": "Type of update performed, must be previously authorized."
        }
      },
      "removeAuthorizedSender(address)": {
        "params": {
          "sender": "Address to be unauthorized."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Risk Oracle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAuthorizedSender(address)": {
        "notice": "Adds a new sender to the list of addresses authorized to perform updates."
      },
      "addUpdateType(string)": {
        "notice": "Adds a new type of update to the list of authorized update types."
      },
      "constructor": {
        "notice": "Constructor to set initial authorized addresses and approved update types."
      },
      "getLatestUpdateByParameterAndMarket(string,address)": {
        "notice": "Fetches the most recent update for a specific parameter in a specific market."
      },
      "isAuthorized(address)": {
        "notice": "Checks if an address is authorized to perform updates."
      },
      "publishBulkRiskParameterUpdates(string[],bytes[],string[],address[],bytes[])": {
        "notice": "Publishes multiple risk parameter updates in a single transaction."
      },
      "publishRiskParameterUpdate(string,bytes,string,address,bytes)": {
        "notice": "Publishes a new risk parameter update."
      },
      "removeAuthorizedSender(address)": {
        "notice": "Removes an address from the list of authorized senders."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4260,
        "contract": "contracts/test/MockRiskOracle.sol:MockRiskOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11380,
        "contract": "contracts/test/MockRiskOracle.sol:MockRiskOracle",
        "label": "allUpdateTypes",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 11384,
        "contract": "contracts/test/MockRiskOracle.sol:MockRiskOracle",
        "label": "validUpdateTypes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 11389,
        "contract": "contracts/test/MockRiskOracle.sol:MockRiskOracle",
        "label": "updatesById",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(RiskParameterUpdate)11377_storage)"
      },
      {
        "astId": 11393,
        "contract": "contracts/test/MockRiskOracle.sol:MockRiskOracle",
        "label": "authorizedSenders",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11399,
        "contract": "contracts/test/MockRiskOracle.sol:MockRiskOracle",
        "label": "latestUpdateIdByMarketAndType",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_uint256))"
      },
      {
        "astId": 11401,
        "contract": "contracts/test/MockRiskOracle.sol:MockRiskOracle",
        "label": "updateCounter",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 11403,
        "contract": "contracts/test/MockRiskOracle.sol:MockRiskOracle",
        "label": "description",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(RiskParameterUpdate)11377_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MockRiskOracle.RiskParameterUpdate)",
        "numberOfBytes": "32",
        "value": "t_struct(RiskParameterUpdate)11377_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RiskParameterUpdate)11377_storage": {
        "encoding": "inplace",
        "label": "struct MockRiskOracle.RiskParameterUpdate",
        "members": [
          {
            "astId": 11362,
            "contract": "contracts/test/MockRiskOracle.sol:MockRiskOracle",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11364,
            "contract": "contracts/test/MockRiskOracle.sol:MockRiskOracle",
            "label": "newValue",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          },
          {
            "astId": 11366,
            "contract": "contracts/test/MockRiskOracle.sol:MockRiskOracle",
            "label": "referenceId",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 11368,
            "contract": "contracts/test/MockRiskOracle.sol:MockRiskOracle",
            "label": "previousValue",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          },
          {
            "astId": 11370,
            "contract": "contracts/test/MockRiskOracle.sol:MockRiskOracle",
            "label": "updateType",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 11372,
            "contract": "contracts/test/MockRiskOracle.sol:MockRiskOracle",
            "label": "updateId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 11374,
            "contract": "contracts/test/MockRiskOracle.sol:MockRiskOracle",
            "label": "market",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 11376,
            "contract": "contracts/test/MockRiskOracle.sol:MockRiskOracle",
            "label": "additionalData",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}